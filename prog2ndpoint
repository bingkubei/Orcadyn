#!/usr/bin/awk -f
BEGIN {
# this program creates the second input file for orca
# JAN 2020 1.0 version, based on 2010 version progdyn
# read progdyn.conf for configuration info

# default parameters, including quassiclassical, no displacements, transition state, not a DRP
# do not change these - rather, change progdyn.conf to set the parameters
	initialDis = 0; timestep = 1E-15; scaling = 1.0; temp = 298.15;
	classical = 0; numimag = 1; DRP = 0; cannonball = 0;
	memory = 4096;
	diag = 1; searchdir = "positive"; boxon = 0;
	boxsize = 10; maxAtomMove = 0.1; title1 = "you"; title2 = "need";
	title3 = "a"; title4 = "progdyn.conf"; processors = 1; highlevel = 999;
	etolerance = 1;

#initialization
	i = 1; j = 1; k = 1;
	c = 29979245800; h = 6.626075E-34; avNum = 6.0221415E23;
	RgasK = 0.00198588; RgasJ = 8.31447;
	numAtoms = 0; atomnumber = 0;

	do {
		getline < "progdyn.conf";
		if ($1 == "method") method = $2;
		if ($1 == "basis") basis = $2;
		if ($1 == "charge") charge = $2;
		if ($1 == "multiplicity") multiplicity = $2;
		if ($1 == "memory") memory = $2;
		if ($1 == "processors") processors = $2;
		if ($1 == "timestep") timestep = $2;
		if ($1 == "diagnostics") diag = $2;
		if ($1 == "method2") meth2 = $2;
		if ($1 == "method3") meth3 = $2;
		if ($1 == "method4") meth4 = $2;
		if ($1 == "highlevel") highlevel = $2;
		if ($1 == "keepevery") keepevery = $2;
		if ($1 == "fixedatom1") fixedatom1 = $2;
		if ($1 == "fixedatom2") fixedatom2 = $2;
		if ($1 == "fixedatom3") fixedatom3 = $2;
		if ($1 == "fixedatom4") fixedatom4 = $2;
		if ($1 == "DRP") DRP = $2;
		if ($1 == "methodfile") methodfilelines = $2;
		if ($1 == "etolerance") etolerance = $2;
		if ($1 == "reversetraj") reversetraj = $2;
		if ($1 == "title") {
			title1 = $2;
			title2 = $3;
			title3 = $4;
			title4 = $5;
		}
		blankLineTester = length($0);
	}
	while (blankLineTester > 1);

	if (diag >= 1) {
		print "***************** starting prog2ndpoint *****************" >> "diagnostics";
		print "method, basis, charge, multiplicity, memory" >> "diagnostics";
		print method, basis, charge, multiplicity, memory >> "diagnostics";
		print "processors, checkpoint, title" >> "diagnostics";
		print processors, checkpoint, title1, title2, title3, title4 >> "diagnostics";
	}


#get the isomer number from file
	getline < "isomernumber";
	isomernum = $1;

#get forward or reverse from skipstart if it exists
	getline < "skipstart";
	trajdirection = $1;

# ok, now we have to figure the second point.  this should be
# x(t) = x + v*t + 1/2*F*t^2/m
# so we need to set up arrays for position, velocity, and force

#read in number of atoms, geometry, masses, and velocity from geoPlusVel
	getline < "geoPlusVel";
	numAtoms = $1;
# geometry
	for (i = 1; i <= numAtoms; i++) {
		getline < "geoPlusVel";
		weight[i] = $5;
		atSym[i] = $1;
		for (j = 1; j <= 3; j++) geoArr[i,j] = $(1 + j);
	}
#velocities
	for (i = 1; i <= numAtoms; i++) {
		getline < "geoPlusVel";
		for (j = 1; j <= 3; j++) velArr[i,j]=$j;
	}

#now we go ahead and add the velocities
	for (i = 1; i <= numAtoms; i++) {
		for (j = 1; j <= 3; j++) {
			arr[i,j] = velArr[i,j] + geoArr[i,j];
			if (trajdirection == "reverserestart") arr[i,j] = geoArr[i,j] - velArr[i,j];
		}
		if (diag > 1) {
			if(i == 1) print "geometry after adding velocities" >> "diagnostics";
			print arr[i,1], arr[i,2], arr[i,3] >> "diagnostics";
		}
	}

#pull out other information useful for testing whether total energy is right or bad
	do {
		getline < "geoPlusVel";
		if ($4 == "desired=") desiredModeEnK = $5;
		if ($4 == "modes=") {
			KEinitmodes = $5;
			KEinittotal = $9;
		}
		if ($11 == "potential") potentialE = $13;
		blankLineTester = length($0);
	}
  while (blankLineTester > 1);
#get initial geometry into file traj
	print numAtoms >> "traj";
	print potentialE, title1, title2, title3, title4, "runpoint 1 ", "runisomer ", isomernum >> "traj";
	for (i = 1; i <= numAtoms; i++) {
		print atSym[i], geoArr[i,1], geoArr[i,2], geoArr[i,3] >> "traj";
	}
} # end of BEGIN

#pull out the potential energy
/FINAL SINGLE POINT ENERGY/ {
	newPotentialE = $5;
	newPotentialEK = (newPotentialE - potentialE) * 627.509;
}

# now we go ahead and translate the forces and add them
/CARTESIAN GRADIENT/, /Difference to translation invariance:/ {
	if ($3 == ":") {
		i = $1;
		for (j = 1; j <= 3; j++) {
			forceArr[i,j] = -$(3 + j);    #the raw units of the forces are Hartree/Bohr
		}
	}
	if (diag > 1) {
		if (i == 1) print "i, weight[i], forceArr[i,1], forceArr[i,2], forceArr[i,3]" >> "diagnostics";
		print i, weight[i], forceArr[i,1], forceArr[i,2], forceArr[i,3] >> "diagnostics";
	}
}

END {
#put out Echeck but only if not a DRP
	if (DRP == 0) {
		print "trajectory #", isomernum >> "Echeck";
		print "point 1 potential E=", newPotentialEK, "   point 1 kinetic E=", KEinittotal, "  Total=", newPotentialEK + KEinittotal >> "Echeck";
		print "desired total energy=", desiredModeEnK >> "Echeck";
		if (newPotentialEK + KEinittotal > desiredModeEnK + etolerance) print "XXXX bad total Energy" >> "Echeck";
		else if (newPotentialEK + KEinittotal < desiredModeEnK - etolerance) print "XXXX bad total Energy" >> "Echeck";
	}
	print "! ", method, basis, meth2, meth3, meth4, " EnGrad nopop";
	print "%pal";
	print "nprocs ", processors;
	print "end";
	print "%maxcore ", memory;
# make the title four words exactly, leaving out spaces if necessary
	print "# ", title1, title2, title3, title4;
	print "# runpoint 2";
	print "# runisomer ", isomernum;
	print "* xyz ", charge, multiplicity;
# turn the forces into motion
	for (i = 1; i <= numAtoms; i++) {
		for (j = 1; j <= 3; j++) {
# conversions here take force to J/angstrom, 1E20 converts to kg angstroms / s^2, then mult time (s^s) and divide by weight in kg to get angstroms
			forceArr[i,j] = 0.5 * 1E20 * forceArr[i,j] * 627.509 * (4184 / (0.529177 * avNum)) * (timestep ^ 2) / (weight[i] / (avNum * 1000));
# for simplicity, DRPs will throw away the forces at the second pont.  This means that if we are not at a saddlepoint, point 2 = point 1 but this is a minor waste
			if (DRP == 1) forceArr[i,j] = 0;
			arr[i,j] = arr[i,j] + forceArr[i,j];
	# if atoms are fixed, replace calcd new position by original position
			if (i == fixedatom1 || i == fixedatom2 || i == fixedatom3 || i == fixedatom4) arr[i,j] = geoArr[i,j];
		}
		if (diag > 1) {
			if (i == 1) print "i, weight[i], forceArr[i,1], forceArr[i,2], forceArr[i,3]" >> "diagnostics";
			print i, weight[i], forceArr[i,1], forceArr[i,2], forceArr[i,3] >> "diagnostics";
		}
		printf("%s %.7f %.7f %.7f", atSym[i], arr[i,1], arr[i,2], arr[i,3]);
		if (i > highlevel) printf(" %s","M");
		print "";
	}
	print "*";
	if (methodfilelines >= 1) {
		for (i = 1; i <= methodfilelines; i++) {
			getline < "methodfile";
			print $0;
		}
	}
	print "";
	#get second geometry into file traj
	print numAtoms >> "traj";
	print newPotentialE, title1, title2, title3, title4, "runpoint 2 ", "runisomer ", isomernum >> "traj";
	for (i = 1;i <= numAtoms; i++) {
		print atSym[i], arr[i,1], arr[i,2], arr[i,3] >> "traj";
	}
}

